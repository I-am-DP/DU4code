

#include <iostream>
#include <stack>
using namespace std;

const int MAX_N = 100;

class Graph {
private:
    int adj[MAX_N][MAX_N];
    int n, e;
    int a[MAX_N];
public:
    Graph() {
        n = 0;
        e = 0;
        for (int i = 0; i < MAX_N; i++) {
            for (int j = 0; j < MAX_N; j++) {
                adj[i][j] = 0;
            }
            a[i] = 0;
        }
    }
    void readGraph() {
        cout << "Enter number of vertices: ";
        cin >> n;
        cout << "Enter number of edges: ";
        cin >> e;
        cout << "Enter edges in u,v format:\n";
        for (int i = 1; i <= e; i++) {
            int u, v;
            cout << "Edge from: ";
            cin >> u;
            cout << "Edge to: ";
            cin >> v;
            adj[u][v] = adj[v][u] = 1;
        }
    }
    void dfs(int start) {
        stack<int> s;
        s.push(start);
        a[start] = 1;
        while (!s.empty()) {
            int x = s.top();
            s.pop();
            cout << x << " ";
            for (int i = 1; i <= n; i++) {
                if (adj[x][i] && !a[i]) {
                    s.push(i);
                    a[i] = 1;
                }
            }
        }
    }
};

int main() {
    Graph g;
    g.readGraph();
    g.dfs(1);
    return 0;
}
